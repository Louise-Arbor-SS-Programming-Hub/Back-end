Prerequisites
Install Required Libraries:

Use pip to install the necessary packages:
bash
Copy code
pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client gspread pandas
Set Up Google Cloud Project:

Enable Gmail API and Google Sheets API in the Google Cloud Console.
Download the OAuth 2.0 credentials (credentials.json).
Set Up a Google Sheet:

Create a new Google Sheet.
Share it with the service account email (if using a service account).
Python Script for Gmail API to Google Sheets
Here’s the complete Python script:

python
Copy code
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import gspread
import datetime

# 1. Set up the Gmail API and Sheets API
SCOPES = [
    'https://www.googleapis.com/auth/gmail.readonly',
    'https://www.googleapis.com/auth/spreadsheets'
]
SERVICE_ACCOUNT_FILE = 'credentials.json'

# Authenticate using the service account file
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# Gmail API setup
gmail_service = build('gmail', 'v1', credentials=credentials)

# Google Sheets API setup
gsheets_client = gspread.authorize(credentials)
sheet = gsheets_client.open("Gmail Data").sheet1  # Replace "Gmail Data" with your sheet name

# 2. Fetch Gmail messages
def fetch_gmail_messages():
    results = gmail_service.users().messages().list(userId='me', maxResults=25).execute()
    messages = results.get('messages', [])
    
    email_data = []

    for msg in messages:
        msg_id = msg['id']
        message = gmail_service.users().messages().get(userId='me', id=msg_id).execute()
        
        headers = message['payload']['headers']
        subject = next((header['value'] for header in headers if header['name'] == 'Subject'), 'No Subject')
        sender = next((header['value'] for header in headers if header['name'] == 'From'), 'Unknown Sender')
        timestamp = datetime.datetime.fromtimestamp(int(message['internalDate']) / 1000)
        snippet = message.get('snippet', 'No Snippet')

        email_data.append([msg_id, subject, sender, timestamp, snippet])
    
    return email_data

# 3. Write data to Google Sheets
def write_to_google_sheets(data):
    # Clear existing data
    sheet.clear()

    # Add headers
    headers = ["Message ID", "Subject", "Sender", "Timestamp", "Snippet"]
    sheet.append_row(headers)

    # Add email data
    for row in data:
        sheet.append_row(row)

# 4. Main function
if __name__ == '__main__':
    print("Fetching Gmail messages...")
    emails = fetch_gmail_messages()
    print(f"Fetched {len(emails)} messages.")

    print("Writing data to Google Sheets...")
    write_to_google_sheets(emails)
    print("Data written successfully!")
Step-by-Step Explanation
Gmail API Setup:

Use the googleapiclient.discovery module to access the Gmail API.
Fetch the last 25 messages with list() and retrieve details with get().
Google Sheets API Setup:

Use the gspread library to interact with Google Sheets.
Open the target sheet and clear existing data.
Fetching Gmail Messages:

Extract key details (subject, sender, timestamp, snippet) for each email.
Writing Data to Sheets:

Append headers and email data to the Google Sheet.
Example Google Sheets Output
Message ID	Subject	Sender	Timestamp	Snippet
17c9e6a1d2e2d98b	Meeting Reminder	team@example.com	2024-11-17 03:00 PM	Don’t forget the meeting tomorrow.
1a9b6dbe3f59c8ea	Welcome to Gmail!	noreply@gmail.com	2024-11-18 10:00 AM	Thank you for signing up!
Notes
Authentication:

Replace credentials.json with your actual file path.
Share the Google Sheet with the service account email.
Customizing the Script:

Adjust maxResults to fetch more or fewer messages.
Add additional email fields, such as to or cc.
Dependencies:

google-api-python-client: For Gmail and Sheets APIs.
gspread: For interacting with Google Sheets.
pandas (optional): For processing the email data before writing it to Sheets.
